/**
 * Copyright (c) 2020 ZxyKira
 * All rights reserved.
 *
 * SPDX-License-Identifier: MIT
 */
#ifndef UTIL_725C70AC_977E_4B0D_B01D_89AD302D24CE
#define UTIL_725C70AC_977E_4B0D_B01D_89AD302D24CE

/* ****************************************************************************************
 * Include
 */

//-----------------------------------------------------------------------------------------
#include "./CommandHandler.h"

//-----------------------------------------------------------------------------------------

/* ****************************************************************************************
 * Namespace
 */
namespace util {
  template <class C>
  class CommandHandlerMethod;
}

/* ****************************************************************************************
 * Class/Interface/Struct/Enum
 */
template <class C>
class util::CommandHandlerMethod : public lang::FunctionMethod<C, CommandExecutor&, bool>,
                                   public util::CommandHandler {
  /* **************************************************************************************
   * Variable <Public>
   */

  /* **************************************************************************************
   * Variable <Protected>
   */

  /* **************************************************************************************
   * Variable <Private>
   */

  /* **************************************************************************************
   * Abstract method <Public>
   */

  /* **************************************************************************************
   * Abstract method <Protected>
   */

  /* **************************************************************************************
   * Construct Method
   */
 public:
  CommandHandlerMethod(C& c, bool (C::*method)(CommandExecutor&)) : lang::FunctionMethod<C, CommandExecutor&, bool>(c, method) {
    return;
  }

  virtual ~CommandHandlerMethod(void) override {
    return;
  }

  /* **************************************************************************************
   * Operator Method
   */

  /* **************************************************************************************
   * Public Method <Static>
   */

  /* **************************************************************************************
   * Public Method <Override>
   */
 public:
  /**
   * @brief
   *
   * @param executor 執行處理器
   * @return true 結束指令處理，返回執行權
   * @return false 尚未結束指令處理，時序保持執行權
   */
  virtual bool onCommand(CommandExecutor& executor) override {
    return this->apply(executor);
  }
  /* **************************************************************************************
   * Public Method
   */

  /* **************************************************************************************
   * Protected Method <Static>
   */

  /* **************************************************************************************
   * Protected Method <Override>
   */

  /* **************************************************************************************
   * Protected Method
   */

  /* **************************************************************************************
   * Private Method <Static>
   */

  /* **************************************************************************************
   * Private Method <Override>
   */

  /* **************************************************************************************
   * Private Method
   */
};

/* ****************************************************************************************
 * End of file
 */

#endif /* UTIL_725C70AC_977E_4B0D_B01D_89AD302D24CE */
